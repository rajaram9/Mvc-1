// <auto-generated />
namespace GetDocument
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("GetDocument.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The assembly to use.
        /// </summary>
        internal static string AssemblyDescription
        {
            get => GetString("AssemblyDescription");
        }

        /// <summary>
        /// The assembly to use.
        /// </summary>
        internal static string FormatAssemblyDescription()
            => GetString("AssemblyDescription");

        /// <summary>
        /// Show JSON output.
        /// </summary>
        internal static string JsonDescription
        {
            get => GetString("JsonDescription");
        }

        /// <summary>
        /// Show JSON output.
        /// </summary>
        internal static string FormatJsonDescription()
            => GetString("JsonDescription");

        /// <summary>
        /// Missing required option '--{option}'.
        /// </summary>
        internal static string MissingOption
        {
            get => GetString("MissingOption");
        }

        /// <summary>
        /// Missing required option '--{option}'.
        /// </summary>
        internal static string FormatMissingOption(object option)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingOption", "option"), option);

        /// <summary>
        /// Do not colorize output.
        /// </summary>
        internal static string NoColorDescription
        {
            get => GetString("NoColorDescription");
        }

        /// <summary>
        /// Do not colorize output.
        /// </summary>
        internal static string FormatNoColorDescription()
            => GetString("NoColorDescription");

        /// <summary>
        /// The file to write the result to.
        /// </summary>
        internal static string OutputDescription
        {
            get => GetString("OutputDescription");
        }

        /// <summary>
        /// The file to write the result to.
        /// </summary>
        internal static string FormatOutputDescription()
            => GetString("OutputDescription");

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string PrefixDescription
        {
            get => GetString("PrefixDescription");
        }

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string FormatPrefixDescription()
            => GetString("PrefixDescription");

        /// <summary>
        /// Using application base '{appBase}'.
        /// </summary>
        internal static string UsingApplicationBase
        {
            get => GetString("UsingApplicationBase");
        }

        /// <summary>
        /// Using application base '{appBase}'.
        /// </summary>
        internal static string FormatUsingApplicationBase(object appBase)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingApplicationBase", "appBase"), appBase);

        /// <summary>
        /// Using assembly '{assembly}'.
        /// </summary>
        internal static string UsingAssembly
        {
            get => GetString("UsingAssembly");
        }

        /// <summary>
        /// Using assembly '{assembly}'.
        /// </summary>
        internal static string FormatUsingAssembly(object assembly)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingAssembly", "assembly"), assembly);

        /// <summary>
        /// Using configuration file '{config}'.
        /// </summary>
        internal static string UsingConfigurationFile
        {
            get => GetString("UsingConfigurationFile");
        }

        /// <summary>
        /// Using configuration file '{config}'.
        /// </summary>
        internal static string FormatUsingConfigurationFile(object config)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingConfigurationFile", "config"), config);

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string VerboseDescription
        {
            get => GetString("VerboseDescription");
        }

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string FormatVerboseDescription()
            => GetString("VerboseDescription");

        /// <summary>
        /// Writing '{file}'...
        /// </summary>
        internal static string WritingFile
        {
            get => GetString("WritingFile");
        }

        /// <summary>
        /// Writing '{file}'...
        /// </summary>
        internal static string FormatWritingFile(object file)
            => string.Format(CultureInfo.CurrentCulture, GetString("WritingFile", "file"), file);

        /// <summary>
        /// Using working directory '{workingDirectory}'.
        /// </summary>
        internal static string UsingWorkingDirectory
        {
            get => GetString("UsingWorkingDirectory");
        }

        /// <summary>
        /// Using working directory '{workingDirectory}'.
        /// </summary>
        internal static string FormatUsingWorkingDirectory(object workingDirectory)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingWorkingDirectory", "workingDirectory"), workingDirectory);

        /// <summary>
        /// Location from which inside man was copied (in the .NET Framework case) or loaded.
        /// </summary>
        internal static string ToolsDirectoryDescription
        {
            get => GetString("ToolsDirectoryDescription");
        }

        /// <summary>
        /// Location from which inside man was copied (in the .NET Framework case) or loaded.
        /// </summary>
        internal static string FormatToolsDirectoryDescription()
            => GetString("ToolsDirectoryDescription");

        /// <summary>
        /// The URI to download the document from.
        /// </summary>
        internal static string UriDescription
        {
            get => GetString("UriDescription");
        }

        /// <summary>
        /// The URI to download the document from.
        /// </summary>
        internal static string FormatUriDescription()
            => GetString("UriDescription");

        /// <summary>
        /// The name of the method to invoke on the '--service' instance. Default value '{defaultMethod}'.
        /// </summary>
        internal static string MethodDescription
        {
            get => GetString("MethodDescription");
        }

        /// <summary>
        /// The name of the method to invoke on the '--service' instance. Default value '{defaultMethod}'.
        /// </summary>
        internal static string FormatMethodDescription(object defaultMethod)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodDescription", "defaultMethod"), defaultMethod);

        /// <summary>
        /// The qualified name of the service type to retrieve from dependency injection. Default value '{defaultService}'.
        /// </summary>
        internal static string ServiceDescription
        {
            get => GetString("ServiceDescription");
        }

        /// <summary>
        /// The qualified name of the service type to retrieve from dependency injection. Default value '{defaultService}'.
        /// </summary>
        internal static string FormatServiceDescription(object defaultService)
            => string.Format(CultureInfo.CurrentCulture, GetString("ServiceDescription", "defaultService"), defaultService);

        /// <summary>
        /// Missing required option '--{option1}' or '--{option2}'.
        /// </summary>
        internal static string MissingOptions
        {
            get => GetString("MissingOptions");
        }

        /// <summary>
        /// Missing required option '--{option1}' or '--{option2}'.
        /// </summary>
        internal static string FormatMissingOptions(object option1, object option2)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingOptions", "option1", "option2"), option1, option2);

        /// <summary>
        /// The name of the document to pass to the '--method' method. Default value '{defaultDocumentName}'.
        /// </summary>
        internal static string DocumentDescription
        {
            get => GetString("DocumentDescription");
        }

        /// <summary>
        /// The name of the document to pass to the '--method' method. Default value '{defaultDocumentName}'.
        /// </summary>
        internal static string FormatDocumentDescription(object defaultDocumentName)
            => string.Format(CultureInfo.CurrentCulture, GetString("DocumentDescription", "defaultDocumentName"), defaultDocumentName);

        /// <summary>
        /// Using document name '{documentName}'.
        /// </summary>
        internal static string UsingDocument
        {
            get => GetString("UsingDocument");
        }

        /// <summary>
        /// Using document name '{documentName}'.
        /// </summary>
        internal static string FormatUsingDocument(object documentName)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingDocument", "documentName"), documentName);

        /// <summary>
        /// Using method '{method}'.
        /// </summary>
        internal static string UsingMethod
        {
            get => GetString("UsingMethod");
        }

        /// <summary>
        /// Using method '{method}'.
        /// </summary>
        internal static string FormatUsingMethod(object method)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingMethod", "method"), method);

        /// <summary>
        /// Using service '{service}'.
        /// </summary>
        internal static string UsingService
        {
            get => GetString("UsingService");
        }

        /// <summary>
        /// Using service '{service}'.
        /// </summary>
        internal static string FormatUsingService(object service)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingService", "service"), service);

        /// <summary>
        /// Using URI '{uri}'.
        /// </summary>
        internal static string UsingUri
        {
            get => GetString("UsingUri");
        }

        /// <summary>
        /// Using URI '{uri}'.
        /// </summary>
        internal static string FormatUsingUri(object uri)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingUri", "uri"), uri);

        /// <summary>
        /// Method '{method}' of service '{service}' failed to generate document '{documentName}'.
        /// </summary>
        internal static string MethodInvocationFailed
        {
            get => GetString("MethodInvocationFailed");
        }

        /// <summary>
        /// Method '{method}' of service '{service}' failed to generate document '{documentName}'.
        /// </summary>
        internal static string FormatMethodInvocationFailed(object method, object service, object documentName)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodInvocationFailed", "method", "service", "documentName"), method, service, documentName);

        /// <summary>
        /// Assembly '{assemblyPath}' does not contain an entry point.
        /// </summary>
        internal static string MissingEntryPoint
        {
            get => GetString("MissingEntryPoint");
        }

        /// <summary>
        /// Assembly '{assemblyPath}' does not contain an entry point.
        /// </summary>
        internal static string FormatMissingEntryPoint(object assemblyPath)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingEntryPoint", "assemblyPath"), assemblyPath);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
