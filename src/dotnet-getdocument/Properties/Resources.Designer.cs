// <auto-generated />
namespace GetDocument
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("GetDocument.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The configuration to use.
        /// </summary>
        internal static string ConfigurationDescription
        {
            get => GetString("ConfigurationDescription");
        }

        /// <summary>
        /// The configuration to use.
        /// </summary>
        internal static string FormatConfigurationDescription()
            => GetString("ConfigurationDescription");

        /// <summary>
        /// dotnet getdocument
        /// </summary>
        internal static string CommandFullName
        {
            get => GetString("CommandFullName");
        }

        /// <summary>
        /// dotnet getdocument
        /// </summary>
        internal static string FormatCommandFullName()
            => GetString("CommandFullName");

        /// <summary>
        /// The target framework.
        /// </summary>
        internal static string FrameworkDescription
        {
            get => GetString("FrameworkDescription");
        }

        /// <summary>
        /// The target framework.
        /// </summary>
        internal static string FormatFrameworkDescription()
            => GetString("FrameworkDescription");

        /// <summary>
        /// Unable to retrieve project metadata. If you are using custom BaseIntermediateOutputPath or MSBuildProjectExtensionsPath values, use the --msbuildprojectextensionspath option.
        /// </summary>
        internal static string GetMetadataFailed
        {
            get => GetString("GetMetadataFailed");
        }

        /// <summary>
        /// Unable to retrieve project metadata. If you are using custom BaseIntermediateOutputPath or MSBuildProjectExtensionsPath values, use the --msbuildprojectextensionspath option.
        /// </summary>
        internal static string FormatGetMetadataFailed()
            => GetString("GetMetadataFailed");

        /// <summary>
        /// More than one project was found in the current working directory. Use the --project option.
        /// </summary>
        internal static string MultipleProjects
        {
            get => GetString("MultipleProjects");
        }

        /// <summary>
        /// More than one project was found in the current working directory. Use the --project option.
        /// </summary>
        internal static string FormatMultipleProjects()
            => GetString("MultipleProjects");

        /// <summary>
        /// More than one project was found in directory '{projectDirectory}'. Specify one using its file name.
        /// </summary>
        internal static string MultipleProjectsInDirectory
        {
            get => GetString("MultipleProjectsInDirectory");
        }

        /// <summary>
        /// More than one project was found in directory '{projectDirectory}'. Specify one using its file name.
        /// </summary>
        internal static string FormatMultipleProjectsInDirectory(object projectDirectory)
            => string.Format(CultureInfo.CurrentCulture, GetString("MultipleProjectsInDirectory", "projectDirectory"), projectDirectory);

        /// <summary>
        /// Project '{Project}' targets framework '.NETCoreApp' version '{targetFrameworkVersion}'. This version of the GetDocument Command-line Tool only supports version 2.0 or higher.
        /// </summary>
        internal static string NETCoreApp1Project
        {
            get => GetString("NETCoreApp1Project");
        }

        /// <summary>
        /// Project '{Project}' targets framework '.NETCoreApp' version '{targetFrameworkVersion}'. This version of the GetDocument Command-line Tool only supports version 2.0 or higher.
        /// </summary>
        internal static string FormatNETCoreApp1Project(object Project, object targetFrameworkVersion)
            => string.Format(CultureInfo.CurrentCulture, GetString("NETCoreApp1Project", "Project", "targetFrameworkVersion"), Project, targetFrameworkVersion);

        /// <summary>
        /// Project '{Project}' targets framework '.NETStandard'. There is no runtime associated with this framework, and projects targeting it cannot be executed directly. To use the GetDocument Command-line Tool with this project, add an executable project targeting .NET Core or .NET Framework that references this project and specify it using the --project option; or, update this project to target .NET Core and / or .NET Framework.
        /// </summary>
        internal static string NETStandardProject
        {
            get => GetString("NETStandardProject");
        }

        /// <summary>
        /// Project '{Project}' targets framework '.NETStandard'. There is no runtime associated with this framework, and projects targeting it cannot be executed directly. To use the GetDocument Command-line Tool with this project, add an executable project targeting .NET Core or .NET Framework that references this project and specify it using the --project option; or, update this project to target .NET Core and / or .NET Framework.
        /// </summary>
        internal static string FormatNETStandardProject(object Project)
            => string.Format(CultureInfo.CurrentCulture, GetString("NETStandardProject", "Project"), Project);

        /// <summary>
        /// Do not colorize output.
        /// </summary>
        internal static string NoColorDescription
        {
            get => GetString("NoColorDescription");
        }

        /// <summary>
        /// Do not colorize output.
        /// </summary>
        internal static string FormatNoColorDescription()
            => GetString("NoColorDescription");

        /// <summary>
        /// No project was found. Change the current working directory or use the --project option.
        /// </summary>
        internal static string NoProject
        {
            get => GetString("NoProject");
        }

        /// <summary>
        /// No project was found. Change the current working directory or use the --project option.
        /// </summary>
        internal static string FormatNoProject()
            => GetString("NoProject");

        /// <summary>
        /// No project was found in directory '{projectDirectory}'.
        /// </summary>
        internal static string NoProjectInDirectory
        {
            get => GetString("NoProjectInDirectory");
        }

        /// <summary>
        /// No project was found in directory '{projectDirectory}'.
        /// </summary>
        internal static string FormatNoProjectInDirectory(object projectDirectory)
            => string.Format(CultureInfo.CurrentCulture, GetString("NoProjectInDirectory", "projectDirectory"), projectDirectory);

        /// <summary>
        /// Prefix output with level.
        /// </summary>
        internal static string PrefixDescription
        {
            get => GetString("PrefixDescription");
        }

        /// <summary>
        /// Prefix output with level.
        /// </summary>
        internal static string FormatPrefixDescription()
            => GetString("PrefixDescription");

        /// <summary>
        /// The project to use.
        /// </summary>
        internal static string ProjectDescription
        {
            get => GetString("ProjectDescription");
        }

        /// <summary>
        /// The project to use.
        /// </summary>
        internal static string FormatProjectDescription()
            => GetString("ProjectDescription");

        /// <summary>
        /// The MSBuild project extensions path. Defaults to "obj".
        /// </summary>
        internal static string ProjectExtensionsDescription
        {
            get => GetString("ProjectExtensionsDescription");
        }

        /// <summary>
        /// The MSBuild project extensions path. Defaults to "obj".
        /// </summary>
        internal static string FormatProjectExtensionsDescription()
            => GetString("ProjectExtensionsDescription");

        /// <summary>
        /// The runtime identifier to use.
        /// </summary>
        internal static string RuntimeDescription
        {
            get => GetString("RuntimeDescription");
        }

        /// <summary>
        /// The runtime identifier to use.
        /// </summary>
        internal static string FormatRuntimeDescription()
            => GetString("RuntimeDescription");

        /// <summary>
        /// Project '{Project}' targets framework '{targetFramework}'. The GetDocument Command-line Tool does not support this framework.
        /// </summary>
        internal static string UnsupportedFramework
        {
            get => GetString("UnsupportedFramework");
        }

        /// <summary>
        /// Project '{Project}' targets framework '{targetFramework}'. The GetDocument Command-line Tool does not support this framework.
        /// </summary>
        internal static string FormatUnsupportedFramework(object Project, object targetFramework)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedFramework", "Project", "targetFramework"), Project, targetFramework);

        /// <summary>
        /// Using project '{project}'.
        /// </summary>
        internal static string UsingProject
        {
            get => GetString("UsingProject");
        }

        /// <summary>
        /// Using project '{project}'.
        /// </summary>
        internal static string FormatUsingProject(object project)
            => string.Format(CultureInfo.CurrentCulture, GetString("UsingProject", "project"), project);

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string VerboseDescription
        {
            get => GetString("VerboseDescription");
        }

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string FormatVerboseDescription()
            => GetString("VerboseDescription");

        /// <summary>
        /// Writing '{file}'...
        /// </summary>
        internal static string WritingFile
        {
            get => GetString("WritingFile");
        }

        /// <summary>
        /// Writing '{file}'...
        /// </summary>
        internal static string FormatWritingFile(object file)
            => string.Format(CultureInfo.CurrentCulture, GetString("WritingFile", "file"), file);

        /// <summary>
        /// Project output not found and --no-build was specified. Project must be up-to-date when using the --no-build option.
        /// </summary>
        internal static string MustBuild
        {
            get => GetString("MustBuild");
        }

        /// <summary>
        /// Project output not found and --no-build was specified. Project must be up-to-date when using the --no-build option.
        /// </summary>
        internal static string FormatMustBuild()
            => GetString("MustBuild");

        /// <summary>
        /// The file to write the result to.
        /// </summary>
        internal static string OutputDescription
        {
            get => GetString("OutputDescription");
        }

        /// <summary>
        /// The file to write the result to.
        /// </summary>
        internal static string FormatOutputDescription()
            => GetString("OutputDescription");

        /// <summary>
        /// Unable to retrieve '{properrty}' project metadata. Ensure '{msbuildProperty}' is set.
        /// </summary>
        internal static string GetMetadataValueFailed
        {
            get => GetString("GetMetadataValueFailed");
        }

        /// <summary>
        /// Unable to retrieve '{properrty}' project metadata. Ensure '{msbuildProperty}' is set.
        /// </summary>
        internal static string FormatGetMetadataValueFailed(object properrty, object msbuildProperty)
            => string.Format(CultureInfo.CurrentCulture, GetString("GetMetadataValueFailed", "properrty", "msbuildProperty"), properrty, msbuildProperty);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
